// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at http://mozilla.org/MPL/2.0/.
// DO NOT EDIT: this file is automatically generated by docgen
package config

import (
	"github.com/projectdiscovery/yamldoc-go/encoder"
)

var (
	ConfigDoc   encoder.Doc
	DefaultsDoc encoder.Doc
	ClassDoc    encoder.Doc
	PathDoc     encoder.Doc
	RouterDoc   encoder.Doc
)

func init() {
	ConfigDoc.Type = "Config"
	ConfigDoc.Comments[encoder.LineComment] = "Config represents the configuration of matroschka-prober"
	ConfigDoc.Description = "Config represents the configuration of matroschka-prober"
	ConfigDoc.Fields = make([]encoder.Doc, 8)
	ConfigDoc.Fields[0].Name = "metrcis_path"
	ConfigDoc.Fields[0].Type = "string"
	ConfigDoc.Fields[0].Note = ""
	ConfigDoc.Fields[0].Description = "Path used to expose the metrics."
	ConfigDoc.Fields[0].Comments[encoder.LineComment] = "Path used to expose the metrics."
	ConfigDoc.Fields[1].Name = "listen_address"
	ConfigDoc.Fields[1].Type = "string"
	ConfigDoc.Fields[1].Note = ""
	ConfigDoc.Fields[1].Description = "Address used to listen for returned packets"
	ConfigDoc.Fields[1].Comments[encoder.LineComment] = "Address used to listen for returned packets"
	ConfigDoc.Fields[2].Name = "base_port"
	ConfigDoc.Fields[2].Type = "uint16"
	ConfigDoc.Fields[2].Note = ""
	ConfigDoc.Fields[2].Description = "Port used to listen for returned packets"
	ConfigDoc.Fields[2].Comments[encoder.LineComment] = "Port used to listen for returned packets"
	ConfigDoc.Fields[3].Name = "defaults"
	ConfigDoc.Fields[3].Type = "Defaults"
	ConfigDoc.Fields[3].Note = ""
	ConfigDoc.Fields[3].Description = "Default configuration parameters"
	ConfigDoc.Fields[3].Comments[encoder.LineComment] = "Default configuration parameters"
	ConfigDoc.Fields[4].Name = "src_range"
	ConfigDoc.Fields[4].Type = "string"
	ConfigDoc.Fields[4].Note = ""
	ConfigDoc.Fields[4].Description = "Range of IP addresses used as a source for the package. Useful to add some variance in the parameters used to hash the packets in ECMP scenarios\nThe maximum allowed range is 2^16 addresses (/16 mask in IPv4 and /112 mask in IPv6)\nFor IPv6, all ip addresses specified here *must* be also configured in the system."
	ConfigDoc.Fields[4].Comments[encoder.LineComment] = "Range of IP addresses used as a source for the package. Useful to add some variance in the parameters used to hash the packets in ECMP scenarios"
	ConfigDoc.Fields[5].Name = "classes"
	ConfigDoc.Fields[5].Type = "[]Class"
	ConfigDoc.Fields[5].Note = ""
	ConfigDoc.Fields[5].Description = "Class of services"
	ConfigDoc.Fields[5].Comments[encoder.LineComment] = "Class of services"
	ConfigDoc.Fields[6].Name = "paths"
	ConfigDoc.Fields[6].Type = "[]Path"
	ConfigDoc.Fields[6].Note = ""
	ConfigDoc.Fields[6].Description = "List of paths to probe"
	ConfigDoc.Fields[6].Comments[encoder.LineComment] = "List of paths to probe"
	ConfigDoc.Fields[7].Name = "routers"
	ConfigDoc.Fields[7].Type = "[]Router"
	ConfigDoc.Fields[7].Note = ""
	ConfigDoc.Fields[7].Description = "List of routers used as explicit hops in the path."
	ConfigDoc.Fields[7].Comments[encoder.LineComment] = "List of routers used as explicit hops in the path."

	DefaultsDoc.Type = "Defaults"
	DefaultsDoc.Comments[encoder.LineComment] = "Defaults represents the default section of the config"
	DefaultsDoc.Description = "Defaults represents the default section of the config"
	DefaultsDoc.AppearsIn = []encoder.Appearance{
		{
			TypeName:  "Config",
			FieldName: "defaults",
		},
	}
	DefaultsDoc.Fields = make([]encoder.Doc, 6)
	DefaultsDoc.Fields[0].Name = "measurement_length_ms"
	DefaultsDoc.Fields[0].Type = "uint64"
	DefaultsDoc.Fields[0].Note = ""
	DefaultsDoc.Fields[0].Description = "Measurement interval expressed in milliseconds.\nIMPORTANT: If you are scraping the exposed metrics from /metrics, your scraping tool needs to scrape at least once in your defined interval.\nE.G if you define a measurement length of 1000ms, your scraping tool muss scrape at least 1/s, otherwise the data will be gone."
	DefaultsDoc.Fields[0].Comments[encoder.LineComment] = "Measurement interval expressed in milliseconds."
	DefaultsDoc.Fields[1].Name = "payload_size_bytes"
	DefaultsDoc.Fields[1].Type = "uint64"
	DefaultsDoc.Fields[1].Note = ""
	DefaultsDoc.Fields[1].Description = "Optional size of the payload (default = 0)."
	DefaultsDoc.Fields[1].Comments[encoder.LineComment] = "Optional size of the payload (default = 0)."
	DefaultsDoc.Fields[2].Name = "pps"
	DefaultsDoc.Fields[2].Type = "uint64"
	DefaultsDoc.Fields[2].Note = ""
	DefaultsDoc.Fields[2].Description = "Amount of probing packets that will be sent per second."
	DefaultsDoc.Fields[2].Comments[encoder.LineComment] = "Amount of probing packets that will be sent per second."
	DefaultsDoc.Fields[3].Name = "src_range"
	DefaultsDoc.Fields[3].Type = "string"
	DefaultsDoc.Fields[3].Note = ""
	DefaultsDoc.Fields[3].Description = "Range of IP addresses used as a source for the package. Useful to add some variance in the parameters used to hash the packets in ECMP scenarios\nDefaults to 169.254.0.0/16 for IPv4 and fe80::/112 for IPv6\nThe maximum allowed range is 2^16 addresses (/16 mask in IPv4 and /112 mask in IPv6)\nFor IPv6, all ip addresses specified here *must* be also configured in the system."
	DefaultsDoc.Fields[3].Comments[encoder.LineComment] = "Range of IP addresses used as a source for the package. Useful to add some variance in the parameters used to hash the packets in ECMP scenarios"
	DefaultsDoc.Fields[4].Name = "timeout"
	DefaultsDoc.Fields[4].Type = "uint64"
	DefaultsDoc.Fields[4].Note = ""
	DefaultsDoc.Fields[4].Description = "Timeouts expressed in milliseconds"
	DefaultsDoc.Fields[4].Comments[encoder.LineComment] = "Timeouts expressed in milliseconds"
	DefaultsDoc.Fields[5].Name = "src_interface"
	DefaultsDoc.Fields[5].Type = "string"
	DefaultsDoc.Fields[5].Note = ""
	DefaultsDoc.Fields[5].Description = "Source Interface"
	DefaultsDoc.Fields[5].Comments[encoder.LineComment] = "Source Interface"

	ClassDoc.Type = "Class"
	ClassDoc.Comments[encoder.LineComment] = "Class reperesnets a traffic class in the config file"
	ClassDoc.Description = "Class reperesnets a traffic class in the config file"
	ClassDoc.AppearsIn = []encoder.Appearance{
		{
			TypeName:  "Config",
			FieldName: "classes",
		},
	}
	ClassDoc.Fields = make([]encoder.Doc, 2)
	ClassDoc.Fields[0].Name = "name"
	ClassDoc.Fields[0].Type = "string"
	ClassDoc.Fields[0].Note = ""
	ClassDoc.Fields[0].Description = "Name of the traffic class."
	ClassDoc.Fields[0].Comments[encoder.LineComment] = "Name of the traffic class."
	ClassDoc.Fields[1].Name = "tos"
	ClassDoc.Fields[1].Type = "uint8"
	ClassDoc.Fields[1].Note = ""
	ClassDoc.Fields[1].Description = "Type of Service assigned to the class."
	ClassDoc.Fields[1].Comments[encoder.LineComment] = "Type of Service assigned to the class."

	PathDoc.Type = "Path"
	PathDoc.Comments[encoder.LineComment] = "Path represents a path to be probed"
	PathDoc.Description = "Path represents a path to be probed"
	PathDoc.AppearsIn = []encoder.Appearance{
		{
			TypeName:  "Config",
			FieldName: "paths",
		},
	}
	PathDoc.Fields = make([]encoder.Doc, 6)
	PathDoc.Fields[0].Name = "name"
	PathDoc.Fields[0].Type = "string"
	PathDoc.Fields[0].Note = ""
	PathDoc.Fields[0].Description = "Name for the path."
	PathDoc.Fields[0].Comments[encoder.LineComment] = "Name for the path."
	PathDoc.Fields[1].Name = "hops"
	PathDoc.Fields[1].Type = "[]string"
	PathDoc.Fields[1].Note = ""
	PathDoc.Fields[1].Description = "List of hops to probe."
	PathDoc.Fields[1].Comments[encoder.LineComment] = "List of hops to probe."
	PathDoc.Fields[2].Name = "measurement_length_ms"
	PathDoc.Fields[2].Type = "uint64"
	PathDoc.Fields[2].Note = ""
	PathDoc.Fields[2].Description = "Measurement interval expressed in milliseconds."
	PathDoc.Fields[2].Comments[encoder.LineComment] = "Measurement interval expressed in milliseconds."
	PathDoc.Fields[3].Name = "payload_size_bytes"
	PathDoc.Fields[3].Type = "uint64"
	PathDoc.Fields[3].Note = ""
	PathDoc.Fields[3].Description = "Payload size expressed in Bytes."
	PathDoc.Fields[3].Comments[encoder.LineComment] = "Payload size expressed in Bytes."
	PathDoc.Fields[4].Name = "pps"
	PathDoc.Fields[4].Type = "uint64"
	PathDoc.Fields[4].Note = ""
	PathDoc.Fields[4].Description = "Amount of probing packets that will be sent per second."
	PathDoc.Fields[4].Comments[encoder.LineComment] = "Amount of probing packets that will be sent per second."
	PathDoc.Fields[5].Name = "timeout"
	PathDoc.Fields[5].Type = "uint64"
	PathDoc.Fields[5].Note = ""
	PathDoc.Fields[5].Description = "Timeout expressed in milliseconds."
	PathDoc.Fields[5].Comments[encoder.LineComment] = "Timeout expressed in milliseconds."

	RouterDoc.Type = "Router"
	RouterDoc.Comments[encoder.LineComment] = "Router represents a router used a an explicit hop in a path"
	RouterDoc.Description = "Router represents a router used a an explicit hop in a path"
	RouterDoc.AppearsIn = []encoder.Appearance{
		{
			TypeName:  "Config",
			FieldName: "routers",
		},
	}
	RouterDoc.Fields = make([]encoder.Doc, 3)
	RouterDoc.Fields[0].Name = "name"
	RouterDoc.Fields[0].Type = "string"
	RouterDoc.Fields[0].Note = ""
	RouterDoc.Fields[0].Description = "Name of the router."
	RouterDoc.Fields[0].Comments[encoder.LineComment] = "Name of the router."
	RouterDoc.Fields[1].Name = "dst_range"
	RouterDoc.Fields[1].Type = "string"
	RouterDoc.Fields[1].Note = ""
	RouterDoc.Fields[1].Description = "Destination range of IP addresses."
	RouterDoc.Fields[1].Comments[encoder.LineComment] = "Destination range of IP addresses."
	RouterDoc.Fields[2].Name = "src_range"
	RouterDoc.Fields[2].Type = "string"
	RouterDoc.Fields[2].Note = ""
	RouterDoc.Fields[2].Description = "Range of source ip addresses."
	RouterDoc.Fields[2].Comments[encoder.LineComment] = "Range of source ip addresses."
}

func (_ Config) Doc() *encoder.Doc {
	return &ConfigDoc
}

func (_ Defaults) Doc() *encoder.Doc {
	return &DefaultsDoc
}

func (_ Class) Doc() *encoder.Doc {
	return &ClassDoc
}

func (_ Path) Doc() *encoder.Doc {
	return &PathDoc
}

func (_ Router) Doc() *encoder.Doc {
	return &RouterDoc
}

// GetconfigDoc returns documentation for the file pkg/config/config_docs.go.
func GetconfigDoc() *encoder.FileDoc {
	return &encoder.FileDoc{
		Name:        "config",
		Description: "",
		Structs: []*encoder.Doc{
			&ConfigDoc,
			&DefaultsDoc,
			&ClassDoc,
			&PathDoc,
			&RouterDoc,
		},
	}
}
